name: Release

env:
  # deploymentNameBuild: ${{ github.event.inputs.deploymentNameBuild }}
  # location: ${{ github.event.inputs.location }}
  resourceGroup: '${{ secrets.PREFIX }}-rg'
  releaseAPIMBicepPath: './deploy/release/apim_apis.bicep'
  deploymentNameAPIMRelease: '${{ secrets.PREFIX }}apimrelease'

on:
  # Only trigger when build workflow completes successfully
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  #   inputs:
  #     deploymentNameBuild:
  #       description: 'Deployment Name Build'     
  #       required: true
  #     location:
  #       description: 'Location for deployment'     
  #       required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release:
    runs-on: ubuntu-latest
    # Only run if workflow_run was successful or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4

      # LOGIN TO AZURE. THE LOGGED IN SESSION IS ACTIVE TILL A LOGOUT ACTION IS CALLED (OR THE JOB FINISHED)
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true 

      # SET CORRECT AZURE CONTEXT
      - name: 'Set context to subscription'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-AzContext -Subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
          azPSVersion: "latest"

      # WAIT FOR RESOURCES TO BE FULLY PROVISIONED
      - name: 'Wait for resources to be ready'
        run: |
          echo "Waiting 60 seconds for resources to be fully provisioned..."
          sleep 60

      - name: 'Retrieve API Management Instance & Application Insights Name and Deploy'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Setting Azure CLI context..."
            az account set --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
            
            echo "Checking if resource group exists..."
            if ! az group show --name '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' >/dev/null 2>&1; then
              echo "Error: Resource group '${{ env.resourceGroup }}' not found"
              echo "Available resource groups:"
              az group list --query "[].name" -o table
              exit 1
            fi
            
            echo "Resource group '${{ env.resourceGroup }}' exists"
            
            echo "Waiting additional 30 seconds for API Management to be fully ready..."
            sleep 30
            
            echo "Querying API Management instances in resource group: ${{ env.resourceGroup }}"
            apimName=$(az apim list --resource-group '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query "[0].name" -o tsv)
            
            if [ -z "$apimName" ] || [ "$apimName" = "null" ] || [ "$apimName" = "None" ]; then
              echo "Error: No API Management instance found in resource group ${{ env.resourceGroup }}"
              echo "Available resources in resource group:"
              az resource list --resource-group '${{ env.resourceGroup }}' --query "[].{Name:name, Type:type}" -o table
              exit 1
            fi
            
            echo "Querying Application Insights in resource group: ${{ env.resourceGroup }}"
            appInsightsName=$(az monitor app-insights component show -g '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query "[0].appId" -o tsv)
            
            if [ -z "$appInsightsName" ] || [ "$appInsightsName" = "null" ] || [ "$appInsightsName" = "None" ]; then
              echo "Error: No Application Insights instance found in resource group ${{ env.resourceGroup }}"
              echo "Available resources in resource group:"
              az resource list --resource-group '${{ env.resourceGroup }}' --query "[].{Name:name, Type:type}" -o table
              exit 1
            fi
            
            echo "API Management Instance: $apimName"
            echo "Application Insights: $appInsightsName"
            
            echo "Deploying API definition to API Management..."
            az deployment group create \
              --name '${{ env.deploymentNameAPIMRelease }}' \
              --resource-group '${{ env.resourceGroup }}' \
              --template-file '${{ env.releaseAPIMBicepPath }}' \
              --parameters apimName="$apimName" appInsightsName="$appInsightsName" \
              --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
              --verbose

      # LOGOUT
      - name: logout
        run: |
          az logout
        if: always()