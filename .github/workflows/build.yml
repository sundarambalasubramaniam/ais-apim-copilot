
name: Build

env:
  buildBicepPath: './deploy/build/main.bicep'
  deploymentNameBuild: '${{ secrets.PREFIX }}build'
  location: 'westeurope'  # Set default location
  
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # DISABLED - Uncomment to re-enable
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # LOGIN TO AZURE. THE LOGGED IN SESSION IS ACTIVE TILL A LOGOUT ACTION IS CALLED (OR THE JOB FINISHED)
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true 

      # SET CORRECT AZURE CONTEXT
      - name: 'Set context to subscription'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-AzContext -Subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azPSVersion: "latest"

      # DEPLOY THE SERVICES
      - name: 'Create / Update Azure resources'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Host "Starting infrastructure deployment..."
            $result = New-AzSubscriptionDeployment -name '${{ env.deploymentNameBuild }}' -namePrefix '${{ secrets.PREFIX }}' -location '${{ env.location }}' -TemplateFile '${{ env.buildBicepPath }}'
            
            if ($result.ProvisioningState -eq "Succeeded") {
              Write-Host "Infrastructure deployment completed successfully"
              Write-Host "Resource Group: ${{ secrets.PREFIX }}-rg created"
            } else {
              Write-Error "Infrastructure deployment failed with state: $($result.ProvisioningState)"
              exit 1
            }
          azPSVersion: "latest"

      # LOGOUT
      - name: logout
        run: |
          az logout
        if: always()
